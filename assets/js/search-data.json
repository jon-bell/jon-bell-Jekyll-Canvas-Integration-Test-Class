{"0": {
    "doc": "About",
    "title": "About",
    "content": " ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/about/",
    "relUrl": "/about/"
  },"1": {
    "doc": "About",
    "title": "Table of contents",
    "content": ". | About | Lecture | Resources | Assignments | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/about/#table-of-contents",
    "relUrl": "/about/#table-of-contents"
  },"2": {
    "doc": "About",
    "title": "About",
    "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Aliquam ut porttitor leo a diam. Erat nam at lectus urna duis convallis convallis tellus id. Pellentesque elit eget gravida cum sociis natoque penatibus et magnis. Ultrices vitae auctor eu augue ut lectus arcu. Morbi tristique senectus et netus et malesuada. Turpis tincidunt id aliquet risus feugiat in ante. Consequat interdum varius sit amet mattis vulputate enim nulla. Felis eget nunc lobortis mattis aliquam. Eu non diam phasellus vestibulum lorem sed risus. A condimentum vitae sapien pellentesque habitant morbi tristique. Orci dapibus ultrices in iaculis nunc sed augue lacus viverra. Proin sagittis nisl rhoncus mattis rhoncus urna neque. Dictum varius duis at consectetur lorem donec massa sapien. Blandit cursus risus at ultrices mi tempus imperdiet. Laoreet sit amet cursus sit amet dictum sit amet justo. Felis eget nunc lobortis mattis aliquam faucibus. Nam aliquam sem et tortor consequat. ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/about/",
    "relUrl": "/about/"
  },"3": {
    "doc": "About",
    "title": "Lecture",
    "content": "Tempus iaculis urna id volutpat lacus laoreet non curabitur gravida. Vulputate dignissim suspendisse in est ante in. Massa vitae tortor condimentum lacinia quis vel. Gravida neque convallis a cras semper auctor. Pellentesque eu tincidunt tortor aliquam nulla. Quam adipiscing vitae proin sagittis nisl rhoncus mattis rhoncus urna. Sit amet purus gravida quis blandit turpis cursus in. Porttitor leo a diam sollicitudin tempor. Vel facilisis volutpat est velit egestas dui id ornare. Cum sociis natoque penatibus et magnis. Tristique magna sit amet purus gravida. Nibh sit amet commodo nulla facilisi nullam vehicula. Aenean vel elit scelerisque mauris pellentesque pulvinar pellentesque. Id semper risus in hendrerit gravida. Sit amet justo donec enim diam vulputate ut pharetra sit. Vitae justo eget magna fermentum. Tellus in metus vulputate eu. Pellentesque id nibh tortor id aliquet lectus proin nibh nisl. Etiam erat velit scelerisque in dictum non consectetur a erat. Pellentesque eu tincidunt tortor aliquam nulla. ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/about/#lecture",
    "relUrl": "/about/#lecture"
  },"4": {
    "doc": "About",
    "title": "Resources",
    "content": "Lacus viverra vitae congue eu. Suspendisse in est ante in nibh mauris cursus mattis. Nisl vel pretium lectus quam id leo in. Euismod lacinia at quis risus sed vulputate odio. Non enim praesent elementum facilisis. Aliquet sagittis id consectetur purus ut faucibus pulvinar elementum integer. Id interdum velit laoreet id donec ultrices tincidunt arcu. Urna molestie at elementum eu facilisis sed odio. Auctor urna nunc id cursus metus aliquam eleifend. Volutpat commodo sed egestas egestas fringilla phasellus. Libero nunc consequat interdum varius sit amet mattis. Imperdiet nulla malesuada pellentesque elit eget gravida cum sociis natoque. Tortor vitae purus faucibus ornare suspendisse. Auctor elit sed vulputate mi. ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/about/#resources",
    "relUrl": "/about/#resources"
  },"5": {
    "doc": "About",
    "title": "Assignments",
    "content": "Vehicula ipsum a arcu cursus vitae congue. Etiam dignissim diam quis enim lobortis scelerisque fermentum dui. Risus sed vulputate odio ut enim blandit. Aliquam id diam maecenas ultricies mi eget. Id consectetur purus ut faucibus pulvinar elementum integer enim neque. Eget mi proin sed libero enim sed faucibus. Sem integer vitae justo eget magna fermentum iaculis. In mollis nunc sed id semper risus in. Sit amet risus nullam eget felis eget. Mattis ullamcorper velit sed ullamcorper morbi tincidunt ornare massa eget. Nascetur ridiculus mus mauris vitae ultricies leo integer malesuada. Porta non pulvinar neque laoreet suspendisse interdum consectetur libero id. At varius vel pharetra vel turpis nunc eget. Scelerisque purus semper eget duis at tellus. ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/about/#assignments",
    "relUrl": "/about/#assignments"
  },"6": {
    "doc": "Announcements",
    "title": "Announcements",
    "content": "Announcements are stored in the _announcements directory and rendered according to the layout file, _layouts/announcement.html. ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/announcements/",
    "relUrl": "/announcements/"
  },"7": {
    "doc": "Announcements",
    "title": "Week 1 Announcement",
    "content": "Apr 8 &middot; 0 min read . | Create a new repository based on Just the Class. | Configure a publishing source for GitHub Pages. Your course website is now live! | Update _config.yml with your course information. | Edit and create .md Markdown files to add your content. | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/announcements/",
    "relUrl": "/announcements/"
  },"8": {
    "doc": "Announcements",
    "title": "Week 0 Announcement",
    "content": "Apr 1 &middot; 0 min read Hello world! . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/announcements/",
    "relUrl": "/announcements/"
  },"9": {
    "doc": "Assignments",
    "title": "Assignments",
    "content": " ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/assignments/",
    "relUrl": "/assignments/"
  },"10": {
    "doc": "Calendar",
    "title": "Calendar",
    "content": " ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/calendar/",
    "relUrl": "/calendar/"
  },"11": {
    "doc": "Assignment 1",
    "title": "Part 1: Documenting the design",
    "content": "Avery’s first prototype implementation of Covey.Town was unreadable spaghetti code that was deemed “Not Satisfactory” by upper management and was rejected. Avery spent the whole weekend trying to rewrite it following the design principles covered in Lessons 1.2-1.3. Avery’s done an OK job at this, and the code is much better, but it’s still missing design documents. Your first task is to review Avery’s code and document the design. Download Avery’s code for the backend module here. Extract this archive, run npm install in it to fetch all of the dependencies, and open the code in your IDE to start to get a handle on what Avery did here. To help you set up a local development environment for this class, we’ve prepared a tutorial for setting up a development environment with NodeJS, VSCode and TypeScript. Review Avery’s code to understand the role of the following types, and create a CRC card for each: . | PlayerSession (in src/types/PlayerSession.ts) | Player (in src/types/Player.ts) | CoveyRoomListener (in src/types/CoveyRoomListener.ts) | CoveyRoomController (in lib/CoveyRoomController.ts) | roomJoinHandler (in requestHandlers/CoveyRoomRequestHandlers.ts) | roomSubscriptionHandler (in requestHandlers/CoveyRoomRequestHandlers.ts) | IVideoClient (in lib/IVideoClient.ts) | . Please refer to Lesson 2.1 for more details about CRC cards, and examples of CRC cards. Note that TypeScript functions are first-class entities that can be passed around as objects. Hence, while traditionally the first ‘C’ in ‘CRC’ stands for Class (that is, we make CRC cards for classes), for this design exercise, we’ll consider the two functions roomJoinHandler and roomSubscriptionHandler as sufficiently important types to each have CRC cards. In a language like Java, each of these functions would likely end up being a class with a single function — in TypeScript, we can have that single function stand on its own without being part of a class. Each CRC card should include: . | the name of the class, function or interface being described | a short phrase or sentence describing the responsibility of this class in the context of the entire application | the collaborators of the class. These are the classes which are directly coupled to the class. In some cases, this list may be open-ended. | the portion of the application’s state is that is kept in an object of this class (note: methods to not have state) | . Notes about Promise and async/await in Avery’s code: You’ll notice that Avery’s code makes use of some types and keywords that may not be clear to you right now, for instance the addPlayer method in CoveyRoomController: . async addPlayer(newPlayer: Player): Promise&lt;PlayerSession&gt; { const theSession = new PlayerSession(newPlayer); this.sessions.push(theSession); this.players.push(newPlayer); // Create a video token for this user to join this room theSession.videoToken = await this.videoClient.getTokenForRoom('demoRoom', newPlayer.id); // Notify other players that this player has joined this.listeners.forEach((listener) =&gt; listener.onPlayerJoined(newPlayer)); return theSession; } . We will cover these keywords and their implications in detail in week 4. For now, it’s easiest if you simply ignore these keywords - and when you see a return type of Promise&lt;Foo&gt;, look past the Promise part, and instead simply consider the return type to be Foo (in the case of addPlayer above, consider the return type to simply be a PlayerSession). Rubric Specification for Part 1 . Part 1 will account for 1/3 of your overall grade on this assignment. To receive a mark of “Satisfactory” for Part 1, your submission must satisfy this specification: . | Include a CRC card for each of the 7 types listed above | Each card must include a short phrase or two describing the responsibilities of the type in the context of the application | Each card must include all relevant collaborators (when these can be determined from the codebase) | Each card must include a description of the state that is kept by objects of the class. | . To receive a mark of “Meets minimum expectations”, your submission for Part 1 must satisfy this specification: . | Include a CRC card for each of the 7 types listed above | Each card includes a short phrase or two describing the responsibilities of and state stored by each type, as outlined above. Some of these may be incorrect or irrelevant. | Most cards include their relevant collaborators, but some may be incorrect | . Submissions that do not meet the above criteria will receive no credit for part 1. ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/assignments/hw1#part-1-documenting-the-design",
    "relUrl": "/assignments/hw1#part-1-documenting-the-design"
  },"12": {
    "doc": "Assignment 1",
    "title": "Part 2: Evaluating the design",
    "content": "Using the design principles covered in Lessons 1.2-1.3, please review the following aspects of Avery’s design, and provide a 2-4 sentence response to each of the following questions: . | Does CoveyRoomController follow the principle of encapsulation? Explain how it does or does not follow this principle. | Avery is currently using a video service called Twilio Programmable Video for Covey.Town. What changes would be necessary to change to a different provider, and how does Avery’s design make that easy or hard? | Consider the interface CoveyRoomListener: this interface is part of an observer pattern that Avery designed as part of the server code. Describe the role of this pattern in the overall behavior of this system. | Avery received a warning for adherence to our project’s naming conventions. Thankfully, we think that the names of each type are OK, and similarly, that the names for each property are OK. However, we were concerned with some of the names of local variables within Avery’s code. Using the rules outlined in our style guide, find three naming violations in local variables in Avery’s code and suggest a better name for each. | . The following optional question does not count towards your grade, but will be used to help Avery improve their design in the future (which might mean that you have an easier time understanding Avery’s code!): . What do you think overall of Avery’s design? Are there parts that you think could be improved? . Rubric Specification for Part 2 . Each of the four questions in Part 2 will account for 1/12 of your overall grade for this assignment (that is, Part 2 will account for 1/3 of the overall grade, with each question weighted evenly). Each of the four questions will be graded to the following specification: . To receive a mark of “Satisfactory” on a question: . | The answer is factually correct, making use of the design principles and patterns described in class | The provided explanation is 2-4 sentences, and relates the abstract design concept to the code provided | . To receive a mark of “Meets minimum expectations” on a question: . | The answer is factually correct | The provided explanation is 2-4 sentences and describes the design concept or the code, but does not directly link them together | . Answers that do not meet the above criteria will receive no credit for that question. ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/assignments/hw1#part-2-evaluating-the-design",
    "relUrl": "/assignments/hw1#part-2-evaluating-the-design"
  },"13": {
    "doc": "Assignment 1",
    "title": "Part 3: Extending the design",
    "content": "Avery’s prototype almost implements the Minimum Viable Product (the first deliverable that satisfies our client’s must have requirements) for Covey.Town, but lacks one crucial feature: support for multiple rooms. The Covey.Town prototype currently consists of a single room: all users that connect to Covey.Town are placed on the same map. Our client is unhappy with this because they really want people to be able to create their own personalized spaces in Covey.Town. Also, since each room is mapped to a single video room in our video calling system, and each video room is limited to only 50 participants, having a single room means that there can only be 50 people on the platform at once. But, if we can structure the system so that different groups of users join different rooms, then we can satisfy our client’s requirement, while also allowing more than 50 people to use the system at a time, by putting them in different rooms. Avery started implementing this feature, but never got to finish it: apparently Avery’s frontend code is a huge mess of spaghetti too, and Avery’s manager told them to focus on cleaning that up before finishing the product. While Avery cleans up the frontend code, your task will be to implement this last key feature: adding support for multiple rooms. For this onboarding assignment, you’ll modify Avery’s backend code to support multiple rooms. Once Avery finishes reorganizing the frontend code (and you learn about frontend development in class), you’ll also modify the frontend to support this feature. Avery previously created the interface ICoveyRoomsStore to define the behavior for a new class, CoveyRoomsStore, which will hold onto a collection of CoveyRoomControllers, one per-room. Your coding task is: . | In the (empty) file CoveyRoomsStore.ts, define the new type CoveyRoomsStore, which should be a singleton, and implement the functionality of ICoveyRoomsStore. Note that you’ll need to proceed to step 2 to fully implement this method. | Change the CoveyRoomController so that it is no longer a singleton. Instead, there will be one instance of this type for each room, and those instances will be created by your CoveyRoomsStore. Add a public constructor, and a new private, readonly property, called _coveyRoomID (and a TypeScript-style getter) to CoveyRoomController so that each room controller knows the name of the room that it is mapped to. Update the call to getTokenForRoom to pass this room ID instead of the hard-coded one. | Change the roomSubscriptionHandler and roomJoinHandler to retrieve the correct CoveyRoomController from your CoveyRoomsStore, based on the coveyRoomID requested. | . Conveniently (or not so conveniently, depending on how you see it), Avery has already written a comprehensive test suite for this feature. To be deemed acceptable, your code must pass all of these tests, and also have no errors reported by the linter. You do not need to correct any design flaws that you’ve identified in Avery’s code already (for instance, the naming violations) - when we review your code, we’ll know that this was Avery’s fault, and have them improve their work for next time! . Rubric Specification for Part 3 . Part 3 will account for 1/3 of your overall grade on this assignment. To receive a mark of “Satisfactory” for Part 3, your code submission must: . | Pass all included automated tests as reported by npm test | Follow the design specification outlined above | Conform to our style guide and have no style warnings or errors as reported by npm run-script lint | Have no @ts-ignore or eslint-disable annotations in the code that you write (the @ts-ignore and eslint-disable lines that are provided in the handout can stay, and GradeScope will automatically tell you if it finds any new ones that you must remove) | . To receive a mark of “Meets minimum expectations” for Part 3, your code submission must: . | Pass all included automated tests as reported by npm test | Have no style errors (may have warnings) as reported by npm run-script lint | Have no @ts-ignore or eslint-disable annotations in the code that you write (the @ts-ignore and eslint-disable lines that are provided in the handout can stay, and GradeScope will automatically tell you if it finds any new ones that you must remove) | . Warning Submissions that do not meet the above criteria will receive no credit for Part 3. Please note that your code must pass all the automated tests that included with the handout, and must have no errors reported by the style checker that is included with the handout. Do not wait to test or style check your code until the last minute. ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/assignments/hw1#part-3-extending-the-design",
    "relUrl": "/assignments/hw1#part-3-extending-the-design"
  },"14": {
    "doc": "Assignment 1",
    "title": "Submission Instructions",
    "content": "Submit your assignment in GradeScope. The easiest way to get into GradeScope the first time is to first sign into Canvas and then click the link on our course for “GradeScope”. You should then also have the option to create an account on GradeScope (if you don’t already have one) so that you can log in to GradeScope directly. Please contact the instructors immediately if you have difficulty accessing the course on GradeScope. Parts 1 &amp; 2 should be submitted be compiled into a single PDF and submitted to the assignment “Homework 1 (Parts 1 &amp; 2)” on GradeScope. Please use GradeScope’s “tagging” interface to associate each of your answers with the questions in the rubric. To submit Part 3: run the command npm run-script pack in your project directory, which will create a zip file that is properly structured for submission. Important: GradeScope only accepts .zip files, not .tgz files - if you run npm pack, you will get a .tgz file, and it will not be accepted by GradeScope. Please be sure to run npm run-script pack. Submit this zip file to the assignment “Homework 1 (Part 3)” on GradeScope. GradeScope will provide you with feedback on your submission, providing a numeric score of: . | 2 (Satisfactory) | 1 (Meets minimum expecations) | 0 (Not passing) | . You can also view the complete output from running the tests and linter on GradeScope. If you have any doubts about the autograder, please contact the course staff immediately. In particular: if you are not able to reproduce and debug test or linter failures on your local machine, please ask the TAs for assistance: otherwise you’ll waste an immense amount of time waiting for the autograder to complete, when you could get the same feedback in seconds running the tests + linter locally. ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/assignments/hw1#submission-instructions",
    "relUrl": "/assignments/hw1#submission-instructions"
  },"15": {
    "doc": "Assignment 1",
    "title": "Assignment 1",
    "content": "Welcome aboard to the Covey.Town team! We’re glad that you’re here and ready to join our development team as a new software engineer. We’re building an open source virtual meeting application, and are very happy to see that we have so many new developers who can help make this application a reality. By the end of the semester, you’ll be able to propose, design, implement and test a new feature for our project. We understand that some of you may have some web development experience, but don’t expect that most of you do, and hence, have created this series of four individual assignments to help you get up to speed with our existing codebase and development environment. Our lead software engineer, Avery, has developed a prototype for Covey.Town, but in their haste, they neglected to create very good documentation. Covey.Town is a web application that consists of some code that runs in each client’s web browser, and also code that runs on a server. In this assignment, you will examine some of the existing code that runs in the server, create documentation for it, and add some new functionality to it. Your assignment will be graded following the rubric embedded in this document, which will consist of the marks “Satisfactory,” “Meets Minimum Expectations,” and “Not Acceptable.” Based on past experiences, we project that this assignment could take you up to 14 hours (depending on your prior preparation). We encourage you to start early so that you can post questions on Piazza, make the most use of our TAs’ tutorials, and attend office hours as necessary in order to ensure that you can reach Satisfactory marks across the board. The objectives for this first assignment, are to: . | Apply design principles and design patterns skills to real code | Evaluate naming and other style concerns of an existing codebase | Write new code in TypeScript | . Parts 1 and 2 of this assignment should be completed in a text editor or word processor, and submitted as a PDF. Part 3 is a coding task, and you will implement it by modifying the same code that you are documenting in Parts 1 and 2. This is an individual assignment. Please post any questions about this assignment on Piazza. Change Log . | 1/24: Updated handout file to copy .env.example to .env. If you already have the handout, you can fix yours by copying the file .env.example to .env. If you download the handout now, it will already be in position. - JSB | 1/26: Update broken link to style guide in part 3 rubric - JSB | 1/27: Clarify that roomJoinHandler and roomSubscriptionHandler should not “be treated as classes,” but more precisely, that you should create a CRC card for each, even though they are not classes. - JSB | 1/31: If you are having trouble running tests, please update the jest.config.js file to read as follows (the testPathIgnorePatterns is new) - JSB module.exports = { preset: \"ts-jest\", testEnvironment: \"node\", testPathIgnorePatterns: ['/node_modules/', '/build/'], }; . | 2/1: Add submission warning about .tgz vs .zip - JSB | 2/2: Clarify the checks on eslint-disable and @ts-ignore that GradeScope now performs, add small hint in Part 3 step 1 that proceeding to step 2 is required to fully implement CoveyRoomStore - JSB | 2/4: If you are having issues with prettier causing linter errors with arrow function arguments, please update your .prettierrc to set arrowParens: 'always' - JSB | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/assignments/hw1",
    "relUrl": "/assignments/hw1"
  },"16": {
    "doc": "Assignment 2",
    "title": "Part 1:",
    "content": "Avery has provided you with a sketch of the API that you should be implementing, and quite helpfully, has provided type definitions for the various API calls. Start by downloading this starter code Extract this archive, run npm install in it to fetch all of the dependencies, and open the code in your IDE to start to get a handle on what Avery did here. To help you set up a local development environment for this class, we’ve prepared a tutorial for setting up a development environment with NodeJS, VSCode and TypeScript. Updating the CoveyRoomsStore . Avery has already modified the CoveyRoomController to generate and keep track of the ID and update password for each room. Avery is using the nanoid library to generate random strings for both the ID and password, which should ensure that IDs are unique, and that passwords are hard to guess. These values are automatically generated in the constructor of CoveyRoomController, so you won’t need to worry about this aspect of the design. Avery has also stubbed out functions in CoveyRoomStore for creating, updating, listing and deleting rooms. You should begin your implementation with these functions in CoveyRoomStore.ts: . /** * Returns a list of all of the publicly-visible rooms, representing each room as * {friendlyName: string, coveyRoomID: string} */ getRooms(): CoveyRoomList /** * Creates a new room and returns the room's `CoveyRoomController`. * * @param friendlyName * @param isPubliclyListed */ createRoom(friendlyName: string, isPubliclyListed: boolean): CoveyRoomController /** * Updates the friendlyName and/or public visibility of a room if there is a room that has the * specified ID and password. Only updates fields that are passed (note friendlyName or makePublic * might be undefined). Returns true if a room was found matching the ID and password, or false * otherwise. If there are no updates (e.g. friendlyName === undefined &amp;&amp; makePublic === undefined), * but the room ID and password are valid, this method should still return true. * * @param coveyRoomID * @param coveyRoomPassword * @param friendlyName * @param makePublic */ updateRoom(coveyRoomID: string, coveyRoomPassword: string, friendlyName?: string, makePublic?: boolean): boolean /** * Deletes the room specified by ID. Only deletes the room if the password specified as a * parameter here matches the password stored by the matching CoveyRoomController. This method * should both remove the room from the RoomStore's listing of rooms, and also disconnect * any players from the room (by calling CoveyRoomController.disconnectAllPlayers). * * Returns true if the room was found, password matched, and the room was deleted. Otherwise * returns false. * * @param coveyRoomID * @param coveyRoomPassword */ deleteRoom(coveyRoomID: string, coveyRoomPassword: string): boolean . Avery has included a thorough test suite for CoveyRoomsStore (CoveyRoomsStore.test.ts), which you can run for yourself. Once you believe that you have implemented these functions correctly, check your progress by running npm test. You should make sure that you pass all of these tests before your proceed. Defining the REST API . As in your onboarding assignment, the file src/router/room.ts contains all of the HTTP routes for the /rooms and /sessions APIs. Avery has added routes to the express server for all of the new API functions listed above except for DELETE /rooms. Add a route to room.ts, connecting from DELETE /rooms/:roomID/:roomPassword to the roomDeleteHandler. Follow the pattern that Avery used in the other request handlers for calling the handler, checking for errors, and sending the response back to the client. Implementing the request handlers . As in your onboarding assignment, the file src/requestHandlers/CoveyRoomRequestHandlers.ts contains the request handlers that process each client’s request and format a response. To help future-proof the API and make it easier to pass metadata back to the client, each request handler now returns a ResponseEnvelope, which consists of a boolean field (isOK), an optional status message (message), and an optional response payload (response) . When you implement your REST client, you’ll find that using a standard approach to pass errors like this is quite useful. There are four handlers that are entirely unimplemented. Your task is to implement all four of these handlers following the specification, using the existing roomJoinHandler as an example. /** * List all of the rooms that are set to \"publicly visible\" * * The `isOK` field on the envelope must be set to `true` in all cases * (this function can not return an error) * * @see CoveyRoomsStore.getRooms - which will return the list of rooms * */ export async function roomListHandler(): Promise&lt;ResponseEnvelope&lt;RoomListResponse&gt;&gt; /** * Create a new room and returns its ID and password. * * Sets the `isOK` field on the envelope to `false` if the `friendlyName` specified is empty * (a 0-length string), and also sets the `message` envelope field with a descriptive error. * * Otherwise, sets the `isOK` field on the envelope to `true` if the request succeeds, and returns * the room information inside of the response envelope. * * @see CoveyRoomsStore.createRoom - which will create and track the new room * * @param requestData the \"friendly name\" to assign this room, and its publicly visibility * */ export async function roomCreateHandler(requestData: RoomCreateRequest): Promise&lt;ResponseEnvelope&lt;RoomCreateResponse&gt;&gt; /** * Deletes a room. * * Sets the `isOK` field on the envelope to `true` if the room exists, password matches, and room * is deleted. Sets the `isOK` field on the envelope to `false` and the `message` field to \"Invalid * Request\" if the room does not exist, or password does not match. * * * Does not return any other data inside of the envelope * * @see CoveyRoomsStore.deleteRoom - which will delete the room from its store * * @param requestData the requested room ID to delete and the password specified by the client */ export async function roomDeleteHandler(requestData: RoomDeleteRequest): Promise&lt;ResponseEnvelope&lt;Record&lt;string, null&gt;&gt;&gt; /** * Updates a room's friendlyName and/or public visibility. * * Rejects the request (by setting `isOK` field on the envelope to `false`) if the request is to * update the `friendlyName` to an empty string. * * Sets the `isOK` field on the envelope to `true` if the room exists, password matches, and room * is updated. Sets the `isOK` field on the envelope to `false` and the `message` field to \"Invalid * Request\" if the room does not exist, or password does not match. * * @see CoveyRoomsStore.updateRoom - which will update the room's data * * @param requestData the update request. This handler should only update fields of the room only * if the password supplied in the request matches the password on record. */ export async function roomUpdateHandler(requestData: RoomUpdateRequest): Promise&lt;ResponseEnvelope&lt;Record&lt;string, null&gt;&gt;&gt; . You can test your request handlers in a few ways: . | By using Postman or Curl, as described in the week 3 tutorial | By continuing the assignment to Part 2: implementing the REST client, and using your client to test your server | By submitting your code to GradeScope, the autograder will test your server code. It will test your server using our reference client. | . Rubric Specification for Part 1 . Part 1 will account for 1/3 of your overall grade on this assignment. To receive a mark of “Satisfactory” for Part 1, your code submission must: . | Pass all included automated tests as reported by npm test (the tests in CoveyRoomStore.test.ts) | Pass all of the automated tests run by GradeScope (which are not included in the handout) | Follow the design specification outlined above | Conform to our style guide and have no style warnings or errors as reported by npm run-script lint | Have no @ts-ignore or eslint-disable annotations in the code that you write | . To receive a mark of “Meets minimum expectations” for Part 1, your code submission must: . | Pass all included automated tests as reported by npm test (the tests in CoveyRoomStore.test.ts). Other tests may fail. | Have no style errors (may have warnings) as reported by npm run-script lint | Have no @ts-ignore or eslint-disable annotations in the code that you write | . Warning Submissions that do not meet the above criteria will receive no credit for Part 1. Do not wait to test or style check your code until the last minute. ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/assignments/hw2#part-1",
    "relUrl": "/assignments/hw2#part-1"
  },"17": {
    "doc": "Assignment 2",
    "title": "Part 2",
    "content": "Your next task is to implement a client for the REST API that you created in the first part of this assignment. The client should be implemented in the file src/client/RoomServiceClient.ts and use the axios library to make requests to the server. Avery has stubbed out the client, and even added boilerplate code to create the axios client, and set the baseURL property on it. Implement each one of the API client methods using the _axios client. Making a call of _axios.get('/endpoint'); will result in a GET request to /endpoint on your server, _axios.post('/endpoint', {foo: 'bar'}) will result in a POST request to /endpoint, passing the request body {foo: 'bar'}. Important (2/11): When we test your API client, we will not be running the server at localhost:8081 - so do not hard code that into your axios requests: please follow this syntax (otherwise the tests will all fail with ECONNREFUSED 127.0.0.1:8081). Refer to the axios documentation, and use other internet sources to learn how to use this library. Hint: Here is a code snippet that makes an HTTP POST request to the endpoint /endpoint, passing requestData, and unwrapping the response as a MyResponseType: const response = await this._axios.post&lt;MyResponseType&gt;('/endpoint', requestData);. Hint (2/10): The return type that you should be telling Axios to expect (MyResponseType in the prior hint) should be the exact same return type as the type returned by your corresponding request handler. TypeScript will not throw an error at runtime if you choose the wrong type, and instead there will be an error that will come from one (or all) of our tests failing since the data is malformed. We have created an automated test suite to evaluate the functionality of your API client, and this test suite will run when you submit your assignment to GradeScope. However, we strongly encourage you to test your API client locally (on your own machine), so that you can find and fix errors faster than it would take to zip your code, upload it to GradeScope, and receive results. You can manually test your API client and API server by: . | Start the server (npm run start) | Use the file src/client/ClientExamples.ts to manually execute the API. In a different terminal window (but in the same directory - the handout directory), run this file with npx ts-node src/client/ClientExamples.ts. | . GradeScope will automatically test your client using our reference server. Hence, you can receive full marks on this part even if your server is not functional, as long as your client implements the specification. Rubric Specification for Part 2 . Part 2 will account for 1/3 of your overall grade on this assignment. To receive a mark of “Satisfactory” for Part 2, your code submission must: . | Pass all of the automated tests run by GradeScope (which are not included in the handout). All tests must pass. | Follow the design specification outlined above | Conform to our style guide and have no style warnings or errors as reported by npm run-script lint | Have no @ts-ignore or eslint-disable annotations in the code that you write | . To receive a mark of “Meets minimum expectations” for Part 2, your code submission must: . | Pass all of the automated tests run by GradeScope (which are not included in the handout). All tests must pass. | Have no style errors (may have warnings) as reported by npm run-script lint | Have no @ts-ignore or eslint-disable annotations in the code that you write | . Warning Submissions that do not meet the above criteria will receive no credit for Part 2. Do not wait to test or style check your code until the last minute. ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/assignments/hw2#part-2",
    "relUrl": "/assignments/hw2#part-2"
  },"18": {
    "doc": "Assignment 2",
    "title": "Part 3: Software Architecture Research",
    "content": "Avery is somewhat concerned that Covey.Town’s launch could be an “epic fail:” if thousands of people try to connect to it, will the system handle the load, or will it grind to a halt, crash, and burn? While browsing around on Twitter, Avery found a blogpost about software architectures for massively multiplayer multi-user environments. Read this blogpost, and based on its contents, answer the following questions related to Covey.Town’s architecture and performance. Please keep each answer to within 2-4 sentences, and be sure to relate your answer to the blogpost. | What aspects of Covey.Town involve sending N^2 network messages (with regards to N concurrent users)? | How does the blog post suggest that multi-player games can improve responsiveness while still maintaining a consistent view of the world? | One of the scaling approaches described in the blogpost is sharding. Given the system that you built in part 1 and 2, how would you suggest that we shard Covey.Town traffic across multiple servers? | One day, we might want to allow more than 50 players to connect to the same room - perhaps, up to 1,000 in one room. How does the article suggest architecting communication in such a big room? | . Rubric Specification for Part 3 . Each of the four questions in Part 3 will account for 1/12 of your overall grade for this assignment (that is, Part 3 will account for 1/3 of the overall grade, with each question weighted evenly). Each of the four questions will be graded to the following specification: . To receive a mark of “Satisfactory” on a question: . | The answer is factually correct, using the terminology and rationales provided in the blogpost | The provided explanation is 2-4 sentences, and relates the architectural concepts with the Covey.Town codebase | . To receive a mark of “Meets minimum expectations” on a question: . | The answer is factually correct | The provided explanation is 2-4 sentences and discusses either an architectural concept or the Covey.Town codebase, but may not link them together | . Answers that do not meet the above criteria will receive no credit for that question. ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/assignments/hw2#part-3-software-architecture-research",
    "relUrl": "/assignments/hw2#part-3-software-architecture-research"
  },"19": {
    "doc": "Assignment 2",
    "title": "Submission Instructions",
    "content": "Submit your assignment in GradeScope. The easiest way to get into GradeScope the first time is to first sign into Canvas and then click the link on our course for “GradeScope”. You should then also have the option to create an account on GradeScope (if you don’t already have one) so that you can log in to GradeScope directly. Please contact the instructors immediately if you have difficulty accessing the course on GradeScope. Parts 1 and 2 should be submitted together on GradeScope. To submit Parts 1 and 2: run the command npm run-script pack in your project directory, which will create a zip file that is properly structured for submission. Important: GradeScope only accepts .zip files, not .tgz files - if you run npm pack, you will get a .tgz file, and it will not be accepted by GradeScope. Please be sure to run npm run-script pack. Submit this zip file to the assignment “Homework 2 (Parts 1 &amp; 2)” on GradeScope. GradeScope will provide you with feedback on your submission, providing a numeric score for Part 1 and Part 2 of: . | 2 (Satisfactory) | 1 (Meets minimum expectations) | 0 (Not passing) | . In the “Autograder” score, you’ll see the sum of these two values. You can view the per-part grade and complete output from running the tests and linter on GradeScope. If you have any doubts about the autograder, please contact the course staff immediately. In particular: if you are not able to reproduce and debug test or linter failures on your local machine, please ask the TAs for assistance: otherwise you’ll waste an immense amount of time waiting for the autograder to complete, when you could get the same feedback in seconds running the tests + linter locally. Part 3 should be submitted as a PDF on GradeScope to the assignment “Homework 2 (Part 3)”. Please use GradeScope’s “tagging” interface to associate each of your answers with the questions in the rubric. ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/assignments/hw2#submission-instructions",
    "relUrl": "/assignments/hw2#submission-instructions"
  },"20": {
    "doc": "Assignment 2",
    "title": "Assignment 2",
    "content": "We’ve got some good news, and some bad news. The good news is that thanks to your design documentation efforts, we now understand Avery’s mess of code much better. The bad news is that we’re going to need you to implement even more functionality to really support multiple rooms in Covey.Town’s backend server. In design review, we found the following key issues that weren’t addressed by the spec that we gave you in Assignment 1: . | There is no way to list which rooms are available for users to join | There is no way to tell if a user is joining a room that already existed (perhaps one where they agreed to meet their friends in), or if the room was created on the spot (perhaps they made a typo in the room name) | Multiple users might want to use the same “friendly name” for their room, like “Coffee Break” - but the design spec only allows for one room with each name. | . In light of these concerns, we’ve sketched out the design for a new, RESTful API for the Covey.Town Room Service. This API consists of two resources: . | /rooms a resource that represents the different rooms available in Covey.Town | /sessions a resource that represents a player’s session in a given room. When a player joins a room, they start a new session. | . By separating the resource of rooms and sessions, we can de-couple the process of joining a room (acquiring a session in that room) and creating the room. We’re also going to add three new important properties to our room resource (and, correspondingly, to our CoveyRoomController class): friendlyName (a non-unique name that describes the room), isPubliclyListed (a boolean value that determines if the room should be listed in the public index of rooms) and roomUpdatePassword (a secret string that is generated by the server and returned to the client that creates the room, allowing the room’s friendlyName and isPubliclyListed fields to be updated in the future). The API will support the following operations: . | POST /rooms - Create a new room. Requires a request body containing the properties friendlyName: string and isPubliclyListed: boolean. Returns a JSON response body of format {coveyRoomID: string, coveyRoomPassword: string} | PATCH /rooms/:roomID - Update the room with a given coveyRoomID. Requires a request body containing the properties coveyRoomID: string, coveyRoomPassword: string, and the data being changed: one or both of friendlyName: string, isPubliclyListed: boolean. | GET /rooms - List all rooms that have isPubliclyListed === true. Returns a JSON response body of format {rooms: {friendlyName: string, coveyRoomID: string}[]} | DELETE /rooms/:roomID/:coveyRoomPassword - Delete a room with a given coveyRoomID if it is protected by the room update password coveyRoomPassword. | POST /sessions - Create a new session. (This is comparable to the old roomJoinRequest from HW1). | . Your assignment will be graded following the rubric embedded in this document, which will consist of the marks “Satisfactory,” “Meets Minimum Expectations,” and “Not Acceptable.” Based on past experiences, we project that this assignment could take you up to 14 hours (depending on your prior preparation). We encourage you to start early so that you can post questions on Piazza, make the most use of our TAs’ tutorials, and attend office hours as necessary in order to ensure that you can reach Satisfactory marks across the board. The objectives for this assignment, are to: . | Expand an existing API following the coding conventions set out in an existing codebase | Practice writing asynchronous code, including making HTTP requests | Read the documentation for a third-party library to learn how to call it | Relate architectural design principles to the design of a real codebase | . Parts 1 and 2 are coding tasks, and you will implement them by modifying the handout code that we provide with this assignment. Part 3 of this assignment should be completed in a text editor or word processor, and submitted as a PDF. This is an individual assignment. Please post any questions about this assignment on Piazza. Change Log . | 2/5: Initial Release | 2/10: Added hint in part 2 about response types - JSB | 2/11: Added warning to not hardcode http://localhost:8081 in the API client - JSB | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/assignments/hw2",
    "relUrl": "/assignments/hw2"
  },"21": {
    "doc": "Just the Class",
    "title": "Not actually a class",
    "content": "A sandbox Jekyll installation to hook up to Canvas LMS . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/#not-actually-a-class",
    "relUrl": "/#not-actually-a-class"
  },"22": {
    "doc": "Just the Class",
    "title": "Week 1 Announcement",
    "content": "Apr 8 &middot; 0 min read . | Create a new repository based on Just the Class. | Configure a publishing source for GitHub Pages. Your course website is now live! | Update _config.yml with your course information. | Edit and create .md Markdown files to add your content. | . Announcements . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/",
    "relUrl": "/"
  },"23": {
    "doc": "Just the Class",
    "title": "Just the Class",
    "content": "Just the Class is a GitHub Pages template developed for the purpose of quickly deploying course websites. In addition to serving plain web pages and files, it provides a boilerplate for: . | a course calendar, | a staff page, | and a weekly schedule. | . Just the Class is a set of customizations on top of the popular Just the Docs theme, which provides a robust and thoroughly-tested foundation that makes it easy to extend for your own special use cases. These foundational features include: . | automatic navigation structure, | instant, full-text search and page indexing, | and a small but powerful set of UI components and authoring utilities. | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/",
    "relUrl": "/"
  },"24": {
    "doc": "Just the Class",
    "title": "Just the Class —&gt; Canvas",
    "content": "This repo contains a hurriedly hacked-together plugin that uses the Canvas LMS REST API to push content from Jekyll into Canvas. It is currently configured to: . | Update the front page in Canvas to match the front page index.md | Create a “module” in Canvas for each lecture (the files in the lectures/ directory). For each module that has lessons or tutorials linked, it will add a module item that links to that same content | Create and update assignments that match the assignments here | . It does not do bi-directional sync: any updates made to this content in Canvas will be overwritten. It does not delete data from Canvas if it’s deleted there. To use it, set the following environmental variables: . | CANVAS_TOKEN - Generate one by opening Canvas then going to Account - Settings - New Access Token | CANVAS_COURSE_ID - Found in the URL of your course on Canvas, e.g. https://northeastern.instructure.com/courses/86615 -&gt; course id is 86615 | CANVAS_BASE_URL - The base URL where Canvas is installed, e.g. in https://northeastern.instructure.com/courses/86615 it’s https://northeastern.infrastructure.com/ | JEKYLL_NO_BUNDLER_REQUIRE=true - For a variety of reasons, it’s a bad idea apparently to include a plugin directly in the _plugins directory. After a semester of usage, if it works OK, I will probably come back to this, clean up rough edges, and publish a gem. Until then, if you don’t set this variable, Jekyll will ignore my Canvas plugin | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/#just-the-class--canvas",
    "relUrl": "/#just-the-class--canvas"
  },"25": {
    "doc": "Modules",
    "title": "Modules",
    "content": " ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/modules/",
    "relUrl": "/modules/"
  },"26": {
    "doc": "Project Final Deliverable",
    "title": "Project Implementation and Documentation",
    "content": "Your final team deliverable will be a “release” of your new feature on GitHub (with tests), and will be accompanied by a demo. Optionally, you may also open a pull request to merge your feature into our main repository (submitting a pull request, or the pull request being merged into our codebase is independent of the grade you receive, but provides a platform for more visibility of your project). Change Log . | 3/23: Initial Release | 4/8: Add page limits, add requirement to submit a link to GitHub repo | 4/12: Add submission info for video, clarify how to submit code and documentation | 4/15 Update: Lots of students had trouble submitting their code/documentation archive on GradeScope, so we’re doing it on Canvas now. However, if you already submitted on GradeScope successfully then you’re all set! | . Contents . Your final team deliverable will include: . | The implementation of your new feature, deployed to Netlify + Heroku | Automated tests for your new feature | A README.md document that includes instructions to deploy Covey.Town with your new feature | A FEATURE.md document that describes the final version of your use cases | A DESIGN.md document that includes documentation of your design (using CRC cards, UML class diagrams, and/or UML sequence diagrams as you find necessary; remember that a picture is worth a thousand words!). In particular, for any change that you had to make to the existing codebase, provide a rationale for why the change was made, and what alternatives were considered. | A 10 minute video that demonstrates the usage of your feature | . Accompanying the final team deliverable will be an individual reflection, which every student must submit on their own, which will include your reflections on: . | The evolution of your project concept: How does the project that you delivered compare to what you originally planned to deliver? What caused these deviations? | The software engineering processes that you feel could have been improved in your project: were there any processes that in hindsight, you wish that you followed, or wish that you followed better? | Your team dynamic: Provide a frank (and ideally, blameless) postmortem of your and your teammates collaborative performance and participation. If you had to do this same project over with the same teammates, what would you have done differently (or not) to improve your team’s overall performance? | . Submission Instructions . (This section added 4/12) . Code and documentation . Place your README.md, FEATURE.md and DESIGN.md files in the root of your project git repository. After you have pushed all of your code (and documentation) to your team’s GitHub repository, create a release on GitHub, and apply the tag version final-submission. After your release is created, you’ll find that there is now a .zip that can be downloaded from GitHub that contains a snapshot of your entire repository. Download this zip file, unpack it, and follow the instructions that you provided in your README to double-check that the course staff will be able to run your project (this step is handy to make sure that you didn’t forget to include some key files in git). If needed, you can delete the release, make some changes, and re-release up until the deadline. Submit this zip file to Canvas under the assignment “Final Project - Code and Documentation Submission”. (4/15 Update: Lots of students had trouble submitting this on GradeScope, so we’re doing it on Canvas now. However, if you already submitted on GradeScope successfully then you’re all set!) . Demo video . Record your demo video and upload it to Canvas, under the assignment “Demo Video for Final Project”. Individual Reflection . Create a PDF of your reflection, and submit it to GradeScope, under the assignment “Project - Individual Reflection”. Grading . The final project deliverable will be graded on the following rubric: . 50% Implementation . Satisfactory: . | Implemented feature satisfies the acceptance criteria as proposed by the team and as interpreted by the course staff | Implemented feature is deployed to a publicly-accessible URL, using Netlify and Heroku for hosting as outlined in Activity 10.1 | Implemented feature contains no ESLint warnings or errors; does not include any eslint-disable or ts-ignore flags | . Meets minimum requirements: . | Implemented feature largely satisfies acceptance criteria as proposed by the team, but may not meet the course staff’s interpretation of those criteria. | Implemented feature is deployed to a publicly-accessible URL, using Netlify and Heroku for hosting as outlined in Activity 10.1 | The implementation may have some obvious flaws, but largely works without crashing. | Implemented feature does not include any eslint-disable or ts-ignore flag | . 10% Testing . Includes automated tests for any new or modified backend features: . Satisfactory: . | Any new or modified backend features include tests that validate that the feature works as intended. Frontend tests are not required (but will be accepted!) | Tests contains no ESLint warnings or errors; does not include any eslint-disable or ts-ignore flags | . Meets minimum requirements: . | Any new or modified backend features include a test, which may or may not be an effective test. | Tests may contain ESlint warnings (but no errors); does not include any eslint-disable or ts-ignore flags | . 10% Documentation – README . Satisfactory: . | README.md file contains detailed instructions to deploy the application with your new feature - modified from our initial installation instructions to include any new setup necessary for your feature. | The course staff is able to follow these instructions to deploy your application. | The document is at most 2 pages (fewer pages are absolutely acceptable, consider this a rough limit) Added 4/8 | The document includes a link to your git repository if public, or instructions to access it if it is private Added 4/8 | . Meets minimum requirements: . | README.md file contains instructions to deploy the application with your new feature, perhaps missing key steps for installing/deploying the application | The course course staff were able to stumble through configuring it without contacting you. | The document is at most 2 pages (fewer pages are absolutely acceptable, consider this a rough limit) Added 4/8 | The document includes a link to your git repository if public, or instructions to access it if it is private Added 4/8 | . 10% Documentation - FEATURES . Satisfactory: . | FEATURES.md file contains sufficient documentation for a user to interact with your updated version of Covey.Town. | The documentation covers all steps that the user would need to take to exercise all of your user stories. | Course staff were able to follow these instructions to successfully interact with your project implementation. | The document is at most 4 pages (fewer pages are absolutely acceptable, consider this a rough limit) Added 4/8 | . Meets minimum requirements: . | FEATURES.md contains documentation for a user to interact with your updated version of Covey.Town, but perhaps does not fully describe how. | The course staff were able to figure out how to use it through trial and error. | The document is at most 4 pages (fewer pages are absolutely acceptable, consider this a rough limit) Added 4/8 | . 10% Documentation - DESIGN . Satisfactory: . | DESIGN.md file contains a description of any substantive changes to the existing Covey.Town codebase, and the architecture of your new code. | It uses CRC cards, or state diagrams or any of the other techniques that help describe the structure. | The document is at most 4 pages (fewer pages are absolutely acceptable, consider this a rough limit) Added 4/8 | . Meets minimum requirements: . | DESIGN.md includes a description of all major changes to the code compared to our existing Covey.Town codebase. | The document is at most 4 pages (fewer pages are absolutely acceptable, consider this a rough limit) Added 4/8 | . 10% Demonstration video . Satisfactory: . | Fits in required time (10 minutes) | Contains a brief description of the high level components in Covey.Town introduced or modified by the team. | Successfully demonstrates all of the primary implemented user stories | . Meets minimum requirements: . | Fits in required time (10 minutes) | Contains a brief description of the high level components in Covey.Town introduced or modified by the team | Demonstrates at least one of the implemented user stories | . Individual Reflection . Accompanying the final team deliverable will be an individual reflection, which every student must submit on their own. Satisfactory completion of all parts of this reflection is required to receive an “A” grade in the course. Project Concept . Reflect on the evolution of your project concept: How does the project that you delivered compare to what you originally planned to deliver? What caused these deviations? . Satisfactory: . | Is at least 2 paragraphs long; | Includes at least 1 paragraph describing all variances from original project concept; | Includes at least 1 paragraph of personal reflection on the cause of any variances from the project concept. | . Project Process . Reflect on the evolution of your development process: How did the process by which you designed and implemented evolve from your original project plan? Were there any processes that in hindsight, you wish that you followed, or wish that you followed better? . Satisfactory: . | Is at least 2 paragraphs long; | Includes at least 1 paragraph describing all variances from the software development processes envisioned in your original project plan; | Includes at least 1 paragraph describing software processes (described in class or not) that you wish you had followed, or wish you had followed better, supported by evidence from your personal experience working on the project. | . Project Team . Reflect on your team dynamic: Provide a frank (and ideally, blameless) postmortem of your and your teammates collaborative performance and participation. If you had to do this same project over with the same teammates, what would you have done differently (or not) to improve your team’s overall performance? . Satisfactory: . | Is at least 2 paragraphs long; | Includes at least 1 paragraph reflecting on your own performance as a team member on this project, including what you would have done differently, given what you know now; | Includes at least 1 paragraph reflecting on your overall team dynamic, including strengths and weaknesses. Reflect on how you might have organized your team differently given what you know now. | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/assignments/project-deliverable#project-implementation-and-documentation",
    "relUrl": "/assignments/project-deliverable#project-implementation-and-documentation"
  },"27": {
    "doc": "Project Final Deliverable",
    "title": "Project Final Deliverable",
    "content": "The final project deliverable is the implementation, available in github and (front-end) deployed on Netlify, and the documentation turned in to gradescope. ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/assignments/project-deliverable",
    "relUrl": "/assignments/project-deliverable"
  },"28": {
    "doc": "Project Overview",
    "title": "Project Overview",
    "content": "The assignments and project for this class are designed to mirror the experiences of a software engineer joining a new development team: you will be “onboarded” to our codebase, make several individual contributions, and then form a team to propose, develop and implement a new feature. The codebase that we’ll be developing on is a remote collaboration tool called Covey.Town. Covey.Town provides a virtual meeting space where different groups of people can have simultaneous video calls, allowing participants to drift between different conversations, just like in real life. Covey.Town is inspired by existing products like Gather.Town, Sococo, and Gatherly.IO — but it is an open source effort, and the features will be proposed and implemented by you! All implementation will take place in the TypeScript programming language, using React for the user interface. Overview of Project Deliverables . | Date | Deliverable | Description | . | 2/12/21 | Team Formation | Specify preferences for teammates | . | 2/26/21 | Project Pitch | Propose a new feature for Covey.Town that can be implemented within 5 weeks | . | 3/12/21 | Project Plan | Refine the scope of your feature based on staff feedback, define detailed requirements and project acceptance criteria. Propose a high-level design. | . | 4/15/21 | Project Implementation and Documentation | Deliver your new feature, including design documentation and tests | . Team Formation . All projects will be completed in a team of 3-4 students. The very first deliverable for the project will be a team formation survey: you will be able to indicate your preferences for teammates. Students may form their own teams (by specifying a complete team of 4 in the survey), otherwise the instructors will assign students to teams based on responses to the survey. All students in each team must be in the same section of the class. Project Pitch . All projects will involve frontend and backend development of a new feature for Covey.Town. Once teams have been formed, you and your team will decide what kind of new feature you would like to build. Your feature should be something that can be implemented within the timeframe allotted (5 weeks), and will be implemented in a fork of the main Covey.Town codebase. Given that you will be up-to-speed on the Covey.Town codebase (and have been introduced to TypeScript, React, NodeJS, and testing frameworks), and that you will have a team of four, we expect that the feature that you propose will be more complex than the feature implemented in the individual homeworks. ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/assignments/project-overview",
    "relUrl": "/assignments/project-overview"
  },"29": {
    "doc": "Schedule",
    "title": "Weekly Schedule",
    "content": ". | 9:00 AM | 9:30 AM | 10:00 AM | 10:30 AM | 11:00 AM | 11:30 AM | 12:00 PM | 12:30 PM | 1:00 PM | 1:30 PM | 2:00 PM | 2:30 PM | 3:00 PM | 3:30 PM | 4:00 PM | 4:30 PM | 5:00 PM | 5:30 PM | . | ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/schedule/#weekly-schedule",
    "relUrl": "/schedule/#weekly-schedule"
  },"30": {
    "doc": "Schedule",
    "title": "Monday",
    "content": ". | Lecture 9:30 AM–10:30 AM 150 Wheeler | Section 11:30 AM–12:30 PM 310 Soda | Office Hours 12:30 PM–2:00 PM 271 Soda | . | ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/schedule/",
    "relUrl": "/schedule/"
  },"31": {
    "doc": "Schedule",
    "title": "Tuesday",
    "content": "| ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/schedule/",
    "relUrl": "/schedule/"
  },"32": {
    "doc": "Schedule",
    "title": "Wednesday",
    "content": ". | Lecture 9:30 AM–10:30 AM 150 Wheeler | Section 11:30 AM–12:30 PM 310 Soda | Office Hours 12:30 PM–2:00 PM 271 Soda | . | ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/schedule/",
    "relUrl": "/schedule/"
  },"33": {
    "doc": "Schedule",
    "title": "Thursday",
    "content": "| ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/schedule/",
    "relUrl": "/schedule/"
  },"34": {
    "doc": "Schedule",
    "title": "Friday",
    "content": ". | Lecture 9:30 AM–10:30 AM 150 Wheeler | Section 11:30 AM–12:30 PM 310 Soda | Office Hours 12:30 PM–2:00 PM 271 Soda | . | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/schedule/",
    "relUrl": "/schedule/"
  },"35": {
    "doc": "Schedule",
    "title": "Schedule",
    "content": " ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/schedule/",
    "relUrl": "/schedule/"
  },"36": {
    "doc": "Staff",
    "title": "Staff",
    "content": "Staff information is stored in the _staffers directory and rendered according to the layout file, _layouts/staffer.html. ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/staff/",
    "relUrl": "/staff/"
  },"37": {
    "doc": "Staff",
    "title": "Instructors",
    "content": "Kevin Lin . me@example.com . Schedule an appointment . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/staff/#instructors",
    "relUrl": "/staff/#instructors"
  },"38": {
    "doc": "Staff",
    "title": "Teaching Assistants",
    "content": "Evil Kevin . me@example.com . I like teaching Computer Science! . More Evil Kevin . me@example.com . I like teaching Computer Science! . Really Evil Kevin . me@example.com . I like teaching Computer Science! . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/staff/#teaching-assistants",
    "relUrl": "/staff/#teaching-assistants"
  },"39": {
    "doc": "Code Style",
    "title": "Code Style",
    "content": "Programs are easier to read and to understand when they are written in a familiar style and follow standard coding conventions. Most organizations that develop software therefore require programmers to write programs that follow the organization’s preferred style and coding conventions. These conventions can be very elaborate. Many of the guidelines are, in fact, arbitrary. When you are working on a coding project with other developers, different developers often have preference for slightly different syntax, for instance: should our string litterals be enclosed by single quotes (') or double quotes (\")? Should files be indented with spaces or tabs? In TypeScript, there are often multiple ways to accomplish the same goal, for instance, you could create a new empty array with the expression const myArray = new Array(), or const myArray = []. Sometimes there is no difference between these variants except for how it reads, and other times there may be unintended consequences of making the seemingly correct but subtly wrong choice. Thankfully, it is possible to write automated checkers (and, at times, fixers) for these style violations. All code that you write for this class will be checked by ESLint, and must be free of style warnings and errors. Our ESlint rules are derived from Airbnb’s JavaScript Style Guide, ESLint’s Recommended Rules, TypeScript/ESLint Recommended Rules, React ESLint Rules and React Hooks ESLint Rules. We do not suggest studying these lists directly, instead, begin writing code naturally, and allow your IDE’s built-in style checker to report issues as you find them. The most important rules to get started are: . | Indent using spaces, not tabs; use 2 spaces for each level of indentation | Enclose all string literals with single quotes, not double | Variables must be named using lowerCamelCase, types are named using UpperCamelCase. Constants (read-only variables that are assigned a static value once and not reused) must be named using UPPER_CASE_WITH_UNDERSCORES. | The maximum line length is 100 characters | . Naming . While the linter can automatically flag names that violate camelCase rules, it can not automatically determine that a name is “good” - this is a subjective judgement call. Please consider the following when choosing names: . | Names for types are typically nouns or noun phrases. Interface names, however, might be adjectives (e.g. Serializable). | Function names are typically verbs or verb phrases | Variable and property names should be descriptive of what the variable is for, and not be named after the type of the variable (which is captured in the variable’s type declaration) | Names for properties that are private must start with a _ | . Documentation and Comments . All public properties and methods (other than getters, setters, and constructors) must be documented using JSDoc-style comments that describes what the property/method does. Example: . /** The unique identifier for this player * */ private readonly _id: string; . /** * A handler to process a remote player's subscription to updates for a room * * @param socket the Socket object that we will use to communicate with the player */ . Consider adding comments within your code to describe non-obvious behavior, or to capture why the code is written the way that it is. Do not add comments that simply restate what can already be immediately discerned by reading the code. For example, here is a useful comment: . // No valid session exists for this token, hence this client's connection should be terminated socket.disconnect(true); return; . Here is a useless comment on the same code snippet: . // Disconnect the socket socket.disconnect(true); return; . Comments are for documentation, not for keeping track of old code you are no longer using (do not submit commented-out code). ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/policies/style/",
    "relUrl": "/policies/style/"
  },"40": {
    "doc": "Installing a Development Environment",
    "title": "Installing NodeJS",
    "content": "Node.js is a JavaScript runtime built on Chrome’s V8 JavaScript engine. There are many ways that you can install Node.js: for instance, you can use a package manager like snap or homebrew to install it; you can download an installer directly from the Node.js website, and you can, of course, build it from source. We recommend installing Node.js using nvm, the node version manager. When language runtimes are in active development (like Node.js is), sometimes you end up needing to have multiple versions of Node.js installed, and different projects that you work on might require different versions of Node.js. These annoyances are quite rare, but when it happens that you need to have mutliple versions of Node.js installed, it’s super handy to have your system set up already so that installing multiple versions and switching between it is easy. You can use our instructions to set up nvm even if you have previously installed Node.js. ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week1-getting-started#installing-nodejs",
    "relUrl": "/tutorials/week1-getting-started#installing-nodejs"
  },"41": {
    "doc": "Installing a Development Environment",
    "title": "Installing NodeJS with NVM for Windows",
    "content": ". | Download nvm-setup.zip from nvm-windows. | . | Extract the contents of nvm-setup.zip and run the executable nvm-setup.exe. | This should open the nvm installation wizard. | . | Accept the license agreement and click next. | . | Select the destination for installing nvm and click next. | . | Select the destination of NodeJS installation Symlink and click next. | . | Click on install to begin installation. | . | Upon completion, you will see the below window . | . | Open a command prompt with administrative privileges. | Verify the installation, run the command *nvm version* . | This should display the version of nvm installed. | | . | Run the command *nvm list available* to display all available NodeJS versions. | . | Install the latest LTS version of nodeJS available using the command *nvm install 14.15.4*. | To use this version of NodeJS, run the command *nvm use 14.15.4*. | Now, NodeJS should be installed and ready for use. To verify the installation run the below commands: . | *node -v* | *npm -v* | | . | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week1-getting-started#installing-nodejs-with-nvm-for-windows",
    "relUrl": "/tutorials/week1-getting-started#installing-nodejs-with-nvm-for-windows"
  },"42": {
    "doc": "Installing a Development Environment",
    "title": "Installation Steps (Linux / Mac)",
    "content": ". | Run either curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash or wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash. | Close and reopen a terminal. | Verify nvm is working by entering command -v nvm. If your terminal prints out nvm, it should be working. If you see vm: command not found or no feedback, open a new terminal and trying again or restart from step 1. | Install node by typing nvm install 14. | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week1-getting-started#installation-steps-linux--mac",
    "relUrl": "/tutorials/week1-getting-started#installation-steps-linux--mac"
  },"43": {
    "doc": "Installing a Development Environment",
    "title": "Verification",
    "content": ". | Open a shell or windows powershell. | Run the command node -v . | This should print the current version of nodeJS installed (v14.x.x) | . | Run the command npm -v . | This should print the current version of npm installed (v6.x.x) | . | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week1-getting-started#verification",
    "relUrl": "/tutorials/week1-getting-started#verification"
  },"44": {
    "doc": "Installing a Development Environment",
    "title": "Installing Visual Studio Code (VSCode)",
    "content": "Visual Studio Code is a lightweight but powerful source code editor which runs on your desktop and is available for Windows, macOS and Linux. It comes with built-in support for JavaScript, TypeScript and Node.js and has a rich ecosystem of extensions for other languages (such as C++, C#, Java, Python, PHP, Go) and runtimes (such as .NET and Unity). Read more here. While you are required to use an IDE for this class, it is not mandatory to use VSCode: if you already are comfortable developing TypeScript or JavaScript in another suitable IDE (like IntelliJ), then you are welcome to continue to use that. However, VSCode is the “supported” option: if you struggle to get things like the linter set up correctly in VSCode, we will be happy to help you. However, we can’t provide such support for all IDEs. ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week1-getting-started#installing-visual-studio-code-vscode",
    "relUrl": "/tutorials/week1-getting-started#installing-visual-studio-code-vscode"
  },"45": {
    "doc": "Installing a Development Environment",
    "title": "Pre-requisites",
    "content": ". | Administrative access on the host machine for software installation. | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week1-getting-started#pre-requisites",
    "relUrl": "/tutorials/week1-getting-started#pre-requisites"
  },"46": {
    "doc": "Installing a Development Environment",
    "title": "Installation Steps (Windows / Mac)",
    "content": ". | Download the VSCode installer from the VSCode website. | . | Run the installer to start the installation wizard for VSCode . | . | Accept the license agreement and click next. | . | Choose the installation directory of your choice and click next. | . | Click next on the select start menu folder screen. | . | Tick all check boxes on the select additional tasks menu and click next. | . | Review the settings on the the “Ready to install” screen and click Install to begin installation. | Once the installation is complete, you will see the below screen and you are ready to use VSCode. | . | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week1-getting-started#installation-steps-windows--mac",
    "relUrl": "/tutorials/week1-getting-started#installation-steps-windows--mac"
  },"47": {
    "doc": "Installing a Development Environment",
    "title": "Installation (Linux)",
    "content": ". | The above instructions for Windows/Mac should also work, but VSCode is also provided as a snap package | . | Install snap if you haven’t already by running sudo apt update and then sudo apt install snapd. | Install VSCode by running sudo snap install --classic code. | Open VSCode as an application on your desktop. | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week1-getting-started#installation-linux",
    "relUrl": "/tutorials/week1-getting-started#installation-linux"
  },"48": {
    "doc": "Installing a Development Environment",
    "title": "Additional Extensions (Optional)",
    "content": "VSCode comes with a rich set of extensions to aid in software development. Below is a list of extensions that you may find useful. | GitLens - Git Supercharged | Prettier - code formatter | vscode-icons | ESLint | Andromeda (Color theme: Andromeda Colorizer) | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week1-getting-started#additional-extensions-optional",
    "relUrl": "/tutorials/week1-getting-started#additional-extensions-optional"
  },"49": {
    "doc": "Installing a Development Environment",
    "title": "Installing Extensions (eg. ESLint)",
    "content": ". | Click on the extensions tab on the left in VSCode. | Search ESLint. | Click on Install. | Done! . | . | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week1-getting-started#installing-extensions-eg-eslint",
    "relUrl": "/tutorials/week1-getting-started#installing-extensions-eg-eslint"
  },"50": {
    "doc": "Installing a Development Environment",
    "title": "Getting Started With Typescript",
    "content": "Typescript is a superscript of JavaScript which adds type information and other features. ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week1-getting-started#getting-started-with-typescript",
    "relUrl": "/tutorials/week1-getting-started#getting-started-with-typescript"
  },"51": {
    "doc": "Installing a Development Environment",
    "title": "Pre-requisites",
    "content": ". | NodeJS | VSCode (recommended but not required) | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week1-getting-started#pre-requisites-1",
    "relUrl": "/tutorials/week1-getting-started#pre-requisites-1"
  },"52": {
    "doc": "Installing a Development Environment",
    "title": "Installation",
    "content": ". | Open VSCode and press the ctrl + ~ (Tilde or back tick key) to open a terminal.` . | Optionally you can open a separate shell (Do not use powershell) | . | Run the command npm install -g typescript in the terminal. | Typescript should now be installed globally and accessible from the terminal. | . | Verify the installation using the command tsc -v in the terminal. (Do NOT use powershell) . | . | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week1-getting-started#installation",
    "relUrl": "/tutorials/week1-getting-started#installation"
  },"53": {
    "doc": "Installing a Development Environment",
    "title": "Hello World",
    "content": ". | Create a new directory and open it with VSCode. | Create a new file called hello-world.ts | Add the following code to the file: console.log('Hello, World!'); . | Open the terminal with ctrl + ~. | Ensure that you are in the same directory as hello-world.ts. | . | Run the command tsc hello-world.ts . | This will generate a JS file called hello-world.js | . | Run the file with node using the command node hello-world.js. | This will give the below result. | | . | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week1-getting-started#hello-world",
    "relUrl": "/tutorials/week1-getting-started#hello-world"
  },"54": {
    "doc": "Installing a Development Environment",
    "title": "Installing a Development Environment",
    "content": "This tutorial describes the basic steps needed to set up a development environment with NodeJS, TypeScript, and VisualStudio Code. At the end of this tutorial, you should have a complete local development environment that you can use to build and test code for this class. Contents: . | Installing NodeJS | Installing Visual Studio Code | Hello, World in TypeScript | . If you run into any difficulties following any of these steps, please post (in a non-private question) on Piazza. ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week1-getting-started",
    "relUrl": "/tutorials/week1-getting-started"
  },"55": {
    "doc": "Week 1 - Overview and Design Principles",
    "title": "Week 1 - Overview and Design Principles",
    "content": "Learning Objectives: . In this first week of the course, you will learn . | a little about the scope of Software Engineering and how it differs from programming | how this course will be organized, and what will be expected from you each week. | some general principles of good program design that are important in almost any programming context | some additional principles that are specific to object-oriented programming. | . Important Dates: . | Tutorial: Getting Started with TypeScript, Date TBD | HW1 Released Jan 22, Due Feb 5 by 10pm | . Lessons: . | Introduction to this class Slides PDF, PPT | Another lesson Slides PDF, PPT | . Tutorial . Resources . Additional Readings: . | Class Syllabus | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/modules/week1-overview-design-principles",
    "relUrl": "/modules/week1-overview-design-principles"
  },"56": {
    "doc": "Version Control",
    "title": "Accessing Khoury Github",
    "content": "We recommend using the Khoury Github for this class, as it will simplify the process of creating private repositories. If you would like for your class project to be publicly available, then you should feel free to simply use github.com. You can login with your Khoury account here: https://github.ccs.neu.edu/login. If you do not already have a Khoury account, you can request one at https://my.khoury.northeastern.edu/account/apply. Once you do this, you will be emailed your account information when it is approved by the IT department. ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week2-git#accessing-khoury-github",
    "relUrl": "/tutorials/week2-git#accessing-khoury-github"
  },"57": {
    "doc": "Version Control",
    "title": "Gitting Started!",
    "content": "Git is a version control system that lets you share versions of code remotely with other collaborators (or have a remote version you can save and access from any computer). The central platform that we will be using is an online service called Github (other services also exist, like GitLab). You can create your own account online at https://github.com/, or use the Khoury Github mentioned above. Again, we recommend using the Khoury Github, as this will be what you will be using for your final projects. Once you login, you can create a new repository (which is a another name for a git enabled folder) by clicking “New” button in the upper left corner: . Use the screen to enter a new folder (repo) name. For example, I chose /test-repo. Additionally select Public or Private depending on who you want to be able to see your project and click add README as well. Then click “create repository”. This should put you on the webpage of the new repository you just created! . To get this repository on your local computer, you will do a process called cloning. Two steps are needed before you can do this process: . | You need to install git locally on your computer. | You need to add an ssh key to your Github page (or you can clone using https). For context, using an ssh key allows you to authenticate your computer with Github automatically using a cryptographic protocol. This process tends to make working with git more smooth when developing your code, as you are automatically authenticated when you start up a new session and don’t have to type in your username and password every time you want to sync the Github repository with your local computer. | . For step one, . | If you are on a linux machine, type sudo apt-get update and then type sudo apt-get install git. | If you are on a mac, type git --version. If it is already installed, it will print out the current version (and you’re ready to go!). If it is not already installed, you will be prompted with the option to install Git by installing the XCode Command Line Tools - follow the prompts to install XCode Command Line Tools, and when you’re done, you’ll have git (along with several other useful tools) | If you are on a windows machine, follow the steps below: . | Download the git installer from the git-scm website . | . | Run the installer and click yes on the windows prompt to allow installation. | Click next on the information page. | . | Select the destination folder for installation and click next. | . | Select all components and click next. | . | Click next on select start menu folder. | . | Select the editor of choice for Git (I’ve kept the default Vim.JPG) and click next. | . | Select “Let git decide” for the default branch and click next. | . | Select “Git from the command line and also 3rd party software” and click next. | . | Select “Use OpenSSL library” and click next. | . | Select “Checkout windows-style, commit unix-style line endings” and click next. | . | Select “Use MinTTY” and click next. | . | Select “default” and click next. | . | Select “Git Credential Manager Core” and click next. | . | Enable both options and click next. | . | Select “Enable support for experimental consoles” and click Install. | . | Git has now been installed. Click finish to exit . | . | . | To verify the installation of git: . | Open a terminal (cmd/powershell) | Run the command *git --version* | You should see the version of git installed . | . | . | . Setting your SSH key on Windows: . | Open git bash | Run the command: *ssh-keygen* . | Hit enter for all options and an RSA key-pair will be generated! | However, it is a good idea to set a passphrase. | | . | . After you install git, navigate to your home directory and type ssh-keygen. Press enter for all options, and optionally enter a password when prompted. It is less secure to not enter a password, but many people opt not to have one when working on a personal computer to make their workflow easier. Next, on the Github website, access your account settings, by clicking on the little icon on the top right and selecting Settings from the drop-down menu. Click on the SSH and GPG keys tab and click New SSH-key. Navigate to your home directory and type cat .ssh/id_rsa.pub. This is your public key, make sure not to access .ssh/id_rsa instead, as this is your private key. Copy and paste this public key into the box, give it a recognizable title (something that you would recognize as your computer) and click Add SSH key. After you add your ssh key, you are ready to clone the repository locally! Navigate back to your repo page and locate the green Code button with an arrow. Make sure it says Clone with SSH and click the clipboard to copy the location. Navigate back to your terminal and type git clone [copied location]. Hit enter to accept the SSH prompt (this will only happen the first time you access a repo). This will clone your repo locally for you to edit! If you encounter an error saying you do not have access rights, you have messed something up in adding your ssh key. Retry the steps for generating and adding the public key to your Github. Further information for troubleshooting and/or setting up an ssh key on other systems as needed can be found at: https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh. ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week2-git#gitting-started",
    "relUrl": "/tutorials/week2-git#gitting-started"
  },"58": {
    "doc": "Version Control",
    "title": "Basic Commands",
    "content": "There are a few basic command you need to know to use git effectively. The basic workflow of working with git is when you resume working on a project, you type git pull in the github enabled folder. This will sync your local branch with the remote server (i.e. the Master branch, implicitly selected or explicitly denoted origin master). Then you work on your code saving normally. When you are done (or want to create a checkpoint), you first add your code, commit it (with a message), and then push it. To check on the status of your commits, you can type git status. This command will show you what files you have edited locally that are not up to date with the master branch in red. To add them, type git add [insert name of file] for each file to add. Of note, you can tab complete the file name and use regular expressions to add more than one file. After you add a file, it will turn green in the git status menu. Then, you type git commit -m \"[Some explanatory message]\". Commits are how git tracks versions of the code. Finally, you type git push and this should update the master branch (seen on the website) with your code changes. For review, when working on code you: . | git pull | Work on your code | git add [file name] | git commit -m \"[Descriptive message]\" | git push | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week2-git#basic-commands",
    "relUrl": "/tutorials/week2-git#basic-commands"
  },"59": {
    "doc": "Version Control",
    "title": "Branching",
    "content": "The above workflow is great when you are the only developer on a project. Now we will discuss an important concept when working with other developers: branching. When adding code to a shared code-base, it is good practice to create a branch to work on locally, using the flow above, and when you want to combine it with the existing code (called merging), to open what is called a Pull Request. This allows for code review (as someone else can approve the request), helps prevent nasty merging issues (as you can see how the branches) will merge before accepting the request, and keeps feature development separate from each other for good development modularity. To get an intuitive idea for what is going on, review this short graphic from github: https://guides.github.com/introduction/flow/. To create a branch, you can type git checkout -b [name of new branch]. This is shorthand for git branch [name of new branch] followed by git checkout [branch name]. To see all the branches for the repo, type git branch with no arguments. To switch between branches, type git checkout [branch name]. When you are on a branch, you can pull, add, commit, and push like a normal workflow above. When you are ready to merge with the master branch, you can either open a pull request or (and this is not recommended because it can cause merge conflicts that are difficult to resolve and can mess with other people’s code) merge directly with the master branch. To open a pull request, navigate to the repo on the github website and select your branch from the branch drop down menu (on top of where the files are listed on the left side; master will likely be selected as default). Above the files should say “This branch is x commits ahead or behind master”. To the left of that select pull request. Add an optional comment and select Create pull request. Github will check for any merge conflicts, and if there exist none, a collaborator (we suggest someone else in your group) can click Merge pull request and then Confirm merge to merge into the master branch. After a branch is merged, you may wish to delete the branch. You can either do this in two ways. First, by selecting the [Number] branches next to the branch pull down menu for the repo and then clicking the trash can next to the branch to delete. Second, you can type git branch -d [branch name] into a terminal. Github also lets you work entirely with branches from the website. This short guide shows how: https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-and-deleting-branches-within-your-repository. To summarize: . | Create a branch with git checkout -b [name of new branch]. | Switch between branches with git checkout [name of branch]. | See all open branches with git branch. | Open and merge pull requests on the github website. | Delete a branch with git branch -d [name of branch]. | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week2-git#branching",
    "relUrl": "/tutorials/week2-git#branching"
  },"60": {
    "doc": "Version Control",
    "title": "Merging and Various Errors",
    "content": "The most common error with git is a merge error. This occurs when you try to push something to a branch and the code you edited does not agree with the same code in some other commit already committed to a branch. The best way to fix merge errors is to take precautionary steps to avoid them. Best practices for doing this have already been mentioned: git pull when resuming work and do not try to merge directly with master, open a pull request. However, merge conflicts are bound to happen, and they, quite frankly are a headache sometimes. We can try to help you with these, but here we provide the steps you should take first to fix them. To see where the conflicts lie (after you git commit and git complains there are merge conflicts), just type git status. This will tell you the files that are in conflict. To manually fix the conflict, open the file. The git merging system will have left you with some information on the differences between the files that cause the conflict. We highly recommend that if you do not use the Atom text editor normally that you download it solely for this purpose. Atom is a popular IDE released by github, so it provides highlighting for merge conflicts. You can download it on Linux by typing sudo apt-get install atom, on Mac by typing brew install atom. The git merge tool will add something to a file such as: . &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD console.log(\"Help! I have a merge conflict!\"); ======= console.log(\"I have a merge conflict! Help!\"); &gt;&gt;&gt;&gt;&gt;&gt;&gt; test_branch . The left arrows followed by HEAD indicate the code in the branch you are trying to merge with (in this case main). The equal signs denote the separation between the two versions, and the code that follows them until the right arrow is the code in the branch you are trying to merge (in this case, denoted by test_branch after the right arrows). To fix this merge manually, pick which version you want, delete the code from the other branch, and delete the left arrows, “HEAD”, the right arrows, and the name of the merging branch (i.e. “test_branch”). Then save the file, re-add it to mark it as fixed, and then commit and push as normal. We recommend Atom because this process is visually highlighted in the file as shown: . You can just click on the “Use me” button for whichever version you want to use, which simplifies the process greatly. For windows, we recommend using TortoiseGit as the mergetool. | Download the installer for TortoiseGit from the official website. | . | Run the installer | Select the installation directory and click next on all windows to complete the installation. | When attempting to merge conflicts from the CLI, tortoisemerge should be the default option now. ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week2-git#merging-and-various-errors",
    "relUrl": "/tutorials/week2-git#merging-and-various-errors"
  },"61": {
    "doc": "Version Control",
    "title": "More Advanced Commands and Fun Stuff",
    "content": "| . | One of the best shortcuts is using flags for git commit. In particular, if you wish to add all the changed files that are currently being tracked (i.e. already exist in the main branch), you can use the flag -a when committing. This equates to typing git commit -am \"[Descriptive Message]\" instead of git adding each file and then committing. | Sometimes you just mess up your code badly and you want to revert to the previous commit that was working. To do this, use the git stash command. First, type git stash. This command reverts you back to your previous commit and actually saves your changes locally in a stash (i.e you can get them back). However, in our example, we just want to dump the bad code, so after git stash type git stash drop. Now your bad code breaking changes are gone. Poof! . | Sometimes you might have already pushed your bad code! In order to “undo” this pushed commit, use git revert. Be warned though, this is entering into the trickier parts of git, and it could really really mess up your code if you aren’t careful. Find the hash of your git commit you want to undo on the web page commit history. Conveniently, there is a copy button for this hash for each commit. Alternatively, you can type git log and it will show the commit history (be warned if this is long, you might want to add flags as to not have to continuously press enter to scroll through it). Then navigate to your terminal and type git revert [copied hash]. This is a separate commit that undoes the other commit, push this commit, and your bad code disappears (and has a traceable history associated with the undo in the commit history). Again, this is a warning that you really could mess up your code by doing this, and we may not be able to help you fix it. To be on the safer side, only revert your last commit when you realize you pushed bad or broken code. | Forking is a form of branching in which you create a local copy of an existing repo (and use this copy as if it is your own), which can later be merged like a normal branch using a pull request. This type of process is usually used in large, open-source projects when developers add features, but you can use it too! For example, these tutorials are developed on a local fork that gets merged with the website master repo when we finish a new one! . | Github supports emojis! To use one, consult the list here: https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md. Select your favorite and add the id of the emoji in question to your git commit message. A personal favorite of one of the authors is \":space_invader:\". These are fun to add to any commit, but in particular a git commit -am \"Done!! :space_invader:\" for when you finish a programming assignment is always fun :) . | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week2-git#more-advanced-commands-and-fun-stuff",
    "relUrl": "/tutorials/week2-git#more-advanced-commands-and-fun-stuff"
  },"62": {
    "doc": "Version Control",
    "title": "Version Control",
    "content": "This tutorial describes the basic usage of git, a version control system to track code changes among yourself and your collaborators. Contents: . | Accessing Khoury Github | Gitting Started! | Basic Commands | Branching | Merging and Various Errors | More Advanced Commands and Fun Stuff | . If you run into any difficulties following any of these steps, please post (in a non-private question) on Piazza. ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week2-git",
    "relUrl": "/tutorials/week2-git"
  },"63": {
    "doc": "Week 2 - Design Documentation and Patterns",
    "title": "Week 2 - Design Documentation and Patterns",
    "content": "Learning Objectives: . In this week of the course, you will learn . | How to explain what it means to document a design, describe the importance of having a shared vocabulary for teams, for communicating with management, for dealing with clients | How to illustrate the basics of CRC cards, UML class diagrams and UML sequence diagrams | How to define what a design pattern is and the role it plays in the Software Development process | How to explain and illustrate these design patterns: Adapter, Composite, Iterator, Singleton, Observer, Visitor | . Important Dates: . | HW1 Due Feb 5 by 10pm | . Lessons: . Resources . Additional Readings: . | For more readings on design patterns: “Design Patterns Explained: A New Perspective on Object-Oriented Design” by Alan Shalloway and James TrottIn-depth coverage of design patterns, considering why they are important in software development, how to apply them, and descriptions of some common patterns. | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/modules/week2-design-docs-patterns",
    "relUrl": "/modules/week2-design-docs-patterns"
  },"64": {
    "doc": "Testing APIs",
    "title": "Setting up the transcript Server",
    "content": "To get the project with the transcript server, download the Example_3.1.zip and extract the contents of the zip file to your local machine. Use your terminal to navigate to the top level directory of the server such that the current working directory is “*/Example_3.1”. Use ‘npm install’ to install necessary dependencies. Use the command ‘npm start’ to start the server. The screen should now show the initial list of transcripts for students in the database and the location of the server: . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week3-apis#setting-up-the-transcript-server",
    "relUrl": "/tutorials/week3-apis#setting-up-the-transcript-server"
  },"65": {
    "doc": "Testing APIs",
    "title": "How to use Postman to test an API",
    "content": "Note: Make sure the transcript server is running. Download the Postman app. Once you have Postman downloaded, open the application. To start, we will first create a new Workspace. Go to the top left part of the application window and select the “Workspaces” button. In the dropdown, select “New Workspace” and give the workspace a name. Once you have your workspace, create a new collection by selecting “New” from the left sidebar and selecting “Collection” from the available options. Name the new collection ‘typescript-server’. Note that you can choose any name for your collection, and this choice will not effect how the requests are made. To make a new request, go to “New” (in the button bar within the window, located under the larger button that says “Explore”) and select “New Request”. Name the request “Basic Get”, as we will be getting the root resource from the server, sometimes noted as a simple backslash (‘/’). Under “Select a collection or folder to save to:”, attach this request to the ‘typescript-server’ collection we created. In the top section of the screen, there is a text-entry bar with a dropdown on the right side that lets you select GET, POST, PUT, DELETE, as well as several other possible HTTP commands you might use to interact with the server. Leave the current action as GET for now. In the text-entry field next to the dropdown, enter ‘localhost:4001/’. Once you have this entered into the field, click the ‘Send’ button. The bottom portion of the screen should now contain the statement “This is GET number 1 on the current server”. If you go back to the terminal running your server, you should see ‘Handling GET/ 1’ printed to the screen. For more requests, check out the section on Testing the transcript server with Postman and Curl . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week3-apis#how-to-use-postman-to-test-an-api",
    "relUrl": "/tutorials/week3-apis#how-to-use-postman-to-test-an-api"
  },"66": {
    "doc": "Testing APIs",
    "title": "How to use CURL to test an API",
    "content": "Installing Curl . | For Windows: Install Git and Git Bash as given in the git tutorial. | For Linux: Open a terminal and Run the command: *sudo apt-get install -y curl*. | For MAC: Open a terminal and Run the command: *brew install curl*. | . Open git bash on Windows or a terminal on Linux/Mac. Verify that Curl is installed using the command *curl --help*. All the following commands will be run in the same terminal. Let us start by making a simple get request to the root resource from the server, sometimes noted as a simple backslash (‘/’). In order to do this, run the command: . | *curl -i http://localhost:4001/* | . Note: The flag -i is optional and is used to display additional information such as headers. If you go back to the terminal running your server, you should see ‘Handling GET/ 1’ printed to the screen. For more requests, check out the section on Testing the transcript server with Postman and Curl . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week3-apis#how-to-use-curl-to-test-an-api",
    "relUrl": "/tutorials/week3-apis#how-to-use-curl-to-test-an-api"
  },"67": {
    "doc": "Testing APIs",
    "title": "Testing the transcript server with Postman and Curl",
    "content": "Now that we have made a basic get request using Postman and Curl, let us explore the other routes of our server. ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week3-apis#testing-the-transcript-server-with-postman-and-curl",
    "relUrl": "/tutorials/week3-apis#testing-the-transcript-server-with-postman-and-curl"
  },"68": {
    "doc": "Testing APIs",
    "title": "GET /transcripts",
    "content": "With Postman . | Return to the Postman application. Create a new request and name the request “Get Transcripts”. Like the previous request, leave the server action as GET, except this time put “localhost:4001/transcripts” in the text-entry field. | . | Once you have this entered, click “Send”. In the bottom part of the screen, you should see the server returned 4 JSON objects corresponding to 4 students in the the class. Each object contains the student’s ID and the student’s name under an object named “student”, and the student’s grade as a collection corresponding to a field named “grades”. | . | . With Curl . | Run the following command in curl to make a GET request to the “/transcripts” route: . | Command: *curl -X GET http://localhost:4001/transcripts*. | Note: *-X GET* is used to specify the request type as GET (default is GET). | . | you should see the server returned 4 JSON objects corresponding to 4 students in the the class. Each object contains the student’s ID and the student’s name under an object named “student”, and the student’s grade as a collection corresponding to a field named “grades”. | | . | . Result on the server . | If you return to the server, you should see the statement “Handling GET/transcripts” along with a collection of objects corresponding to the JSON object in the Postman server. | . | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week3-apis#get-transcripts",
    "relUrl": "/tutorials/week3-apis#get-transcripts"
  },"69": {
    "doc": "Testing APIs",
    "title": "POST /transcripts",
    "content": ". | Now, we’re going to make a Post request to the server to add a new student to the database. | . With Postman . | Return to the Postman application. Create a new request and name the request “Post New Student”. | On the new request, go to the action drop down and change the action from GET to POST. In the text-entry field, enter ‘localhost:4001/transcripts’. | Now, beneath the text entry field, there are several options: Params, Authorization, Headers, Body, Pre-request Script, Tests, and Settings. We want to work with the body of the request, so select the Body option. The Body interface will offer you several formats to enter your data; we are going to use x-www-form-urlencoded. | A new form should appear with fields for Key, Value, and Description. Under Key, enter “name”. Under Value, enter the name of the student you would like to add. Note, you do not need quotes for these values. Leave Description empty. | . | The server should respond with a JSON object with an entry “studentID” and the id number for the new student. Remember this id number, we are going to use it later. | . | . With Curl . | Run the following command in curl to make a POST request to the “/transcripts” route: . | Command: *curl -X POST -H \"Content-Type: application/x-www-form-urlencoded\" -d \"name=Julian Casablancas\" http://localhost:4001/transcripts*. | *-X POST*: Sets the request type as POST. | *-H Content-Type: application/x-www-form-urlencoded*: Adds the header to set Content-Type to x-www-form-urlencoded(which is the default). Use application/json for JSON body. | *-d \"name=Julian Casablancas\"*: Represents the request body in url encoded format. | . | . | The server should respond with a JSON object with an entry “studentID” and the id number for the new student. Remember this id number, we are going to use it later. | | . | . Result on the server . | If you go back to the terminal running the typescript server, you should see a message “Handling POST/transcripts name=, id=\". You have successfully added the student to the database connected to the typescript server. | . | To verify the student has succesfully been added to the database, return to the Postman application and select our previous request “Get Transcripts” or make a get request using curl. Run this request again, and this time you should see your new student in the JSON object returned by the server. | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week3-apis#post-transcripts",
    "relUrl": "/tutorials/week3-apis#post-transcripts"
  },"70": {
    "doc": "Testing APIs",
    "title": "DELETE /transcripts",
    "content": ". | Now, we are going to delete our new student. | . With Postman . | In Postman, create a new request and name the request “Delete Student”. | In this request, we are going to change the action from GET to DELETE in the action dropdown. In the text entry field, we are going to enter “localhost:4001/transcripts/&lt;number&gt;” where &lt;number&gt; is the id of the student you added to the server database in the previous step (5 in our example). | . | Once you have this entered, click “Send”. The server should respond with “OK” in the bottom part of the Postman app. | . | . With Curl . | Run the following command in curl to make a DELETE request to the “/transcripts” route: . | Command: *curl -X DELETE http://localhost:4001/transcripts/5*. | *-X DELETE*: Sets the request type as POST. | *5*: Represents the ID of the student to delete. | . | . | The server should delete the student and respond with “OK”. | | . | . Result on the server . | If you return to the terminal running the server, you should see the message “Handling DEL /transcripts, id = 5”. | . | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week3-apis#delete-transcripts",
    "relUrl": "/tutorials/week3-apis#delete-transcripts"
  },"71": {
    "doc": "Testing APIs",
    "title": "How to add routes to the transcript server",
    "content": "To better understand how the server is serving these requests, look at index.ts in the example_3.1 project files. The server is using the Express library to serve the requests. The local variable ‘app’ is how the server interacts with requests made from Postman. For example, app.get(‘/transcripts’ (req, res) =&gt; { on line 59 is how we get the transcripts from a request to our API. The behavior defined in the internal anonymous function for this request is what is returned to the client. The rest of our calls work the same way. Try looking at some of the other resources and use Postman to get information, post information, or delete information from the server! . Now that we have some idea about the server and it’s code, let us add a new route to the server. Let us assume there is a new requirement in the project which would allow students to upload their transcripts to the server as text files. Let us try to implement a simple file upload feature to the server. | In order to handle file uploads, we must install the fileupload package for express. This can be done by running the following command at the root of our project (where package.json is located): . | Command: *npm install --save express-fileupload*. | | . | Let us import this package in index.ts as below: . | import * as fileUpload from 'express-fileupload'; . | . | Next, we must register the middleware for express as below: . | app.use(fileUpload()); . | Note: This should happen after the call to app creation: . | // create the server, call it app const app: express.Application = express(); . | . | Note: This should happen before registration of routes: . | app.get('/', (req:express.Request, res:express.Response) =&gt; { ngets++; console.log(`Handling GET/`,ngets) res.status(200).send(`This is GET number ${ngets} on the current server`); }); . | . | . | Next we need to implement a route for file uploads, and register a handler for it. This can be done as below: . | app.post('/upload', (req: express.Request, res: express.Response) =&gt; { if(!(&lt;any&gt;req).files || Object.keys((&lt;any&gt;req).files).length === 0) { res.status(500).send('Failed'); return; } console.log('File info: ', (&lt;any&gt;req).files.myFile); console.log('Contents of file: ', (&lt;any&gt;req).files.myFile.data.toString()); res.status(200).send('File Upload Successful'); }); . | The code registers a POST route at “/upload” | If no files are uploaded, it responds with a 500 status code. | If a file is uploaded, it’s contents are printed and the server responds with a status code of 200. | Note: Our example assumes the file to be uploaded with the key “myFile” in our post request. You may choose any name you like, as long as the corresponding change is made in the request. | . | Start the server using the command: . | Command: *npm start*. | . | Create a sample text file to test this route. I have used the below command: . | Command: *echo \"These are the contents of my test file.\" &gt; test.txt* | . | Now, let us test the route using curl as below: . | Command: *curl -F \"myFile=@./test.txt\" http://localhost:4001/upload*. | *-F \"myFile=@./test.txt\"*: Sets the file to be uploaded as test.txt. | Note: myFile was used because that was the key used in the request handler. | Headers and request method are automatically set by curl. | . | . | | . | If you return to the terminal running the server, you should see the details of the file printed. | . | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week3-apis#how-to-add-routes-to-the-transcript-server",
    "relUrl": "/tutorials/week3-apis#how-to-add-routes-to-the-transcript-server"
  },"72": {
    "doc": "Testing APIs",
    "title": "Testing APIs",
    "content": "This tutorial describes how to test an API . Contents: . | Setting up the transcript Server | How to use Postman to test an API | How to use CURL to test an API | Testing the transcript server with Postman and Curl | How to add routes to the transcript server | . ",
    "url": "https://jon-bell.github.io/jon-bell-Jekyll-Canvas-Integration-Test-Class/tutorials/week3-apis",
    "relUrl": "/tutorials/week3-apis"
  }
}
